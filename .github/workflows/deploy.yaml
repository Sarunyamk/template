name: Deploy to VPS

on:
  # Tag Based Deployment
  push:
    tags:
      - "v*.*.*"

  workflow_dispatch:
    # Only Allow select refs to be deployed, no inputs
    inputs:
      environment:
        required: true
        description: "Environment to deploy to (Currently only prod)"
        default: prod
        type: choice
        options:
          - prod

jobs:
  build-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    permissions:
      contents: write
      packages: write

    steps:
      # Step 1: Check out the repository
      - name: Check out code
        uses: actions/checkout@v3

      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 3: Log in to GitHub Container Registry (GHCR)
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Step 4: Build and push Docker image with version and latest tags
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: |
            ghcr.io/relearn-solution-team/<project-repo-name>:${{ github.ref_name }}
            ghcr.io/relearn-solution-team/<project-repo-name>:latest
          cache-from: type=registry,ref=ghcr.io/relearn-solution-team/<project-repo-name>:buildcache
          cache-to: type=registry,ref=ghcr.io/relearn-solution-team/<project-repo-name>:buildcache,mode=max

  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: build-push

    steps:
      # Step 5.1: Check out the repository
      - name: Check out code
        uses: actions/checkout@v3

      # Step 5: Create the .env file (SKIP)

      # Step 6: List files for debugging
      - name: List Files for Debugging
        run: ls -la

      # Step 7.1: Create Directory on VPS if not exists
      - name: Create Directory on VPS
        uses: appleboy/ssh-action@v0.1.9
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_PRIVATE_KEY }}
          debug: true
          script: |
            mkdir -p /home/${{ secrets.VPS_USER }}/relearn-solution-team/<project-repo-name>

      # Step 7.2: Clear All Files in the Directory
      - name: Clear All Files in the Directory
        uses: appleboy/ssh-action@v0.1.9
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_PRIVATE_KEY }}
          debug: true
          script: |
            rm -rf /home/${{ secrets.VPS_USER }}/relearn-solution-team/<project-repo-name>/*

      # Step 7.3: Copy Docker Compose file and .env to VPS
      - name: Copy files to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_PRIVATE_KEY }}
          source: |
            ./docker-compose.prod.yaml
          target: /home/${{ secrets.VPS_USER }}/relearn-solution-team/<project-repo-name>

      - name: Copy .env file to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_PRIVATE_KEY }}
          source: |
            ./.env
          target: /home/${{ secrets.VPS_USER }}/relearn-solution-team/<project-repo-name>

      # Step 7.4: SSH into the VPS and deploy the new image
      - name: Deploy to VPS
        uses: appleboy/ssh-action@v0.1.9
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_PRIVATE_KEY }}
          script: |
            docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
            cd /home/${{ secrets.VPS_USER }}/relearn-solution-team/<project-repo-name>
            docker compose -f ./docker-compose.prod.yaml pull
            docker compose -f ./docker-compose.prod.yaml down --remove-orphans
            docker compose -f ./docker-compose.prod.yaml up -d --remove-orphans

  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: deploy

    steps:
      # Step 9: Health check
      - name: Health check
        run: |
          curl -I http://dev.relearn.solution || exit 1
